======== Running on http://localhost:3978 ========
(Press CTRL+C to quit)
(["title: Guidelines on how to write React components\n\nGuidelines on how to write React components\nLots of useful tips can be found here: https://beta.reactjs.org/\n1. Always write functional components\nClass components are things of past and React community is moving away from them\nThere might be some old class components in our code (written before functional components were the thing). If you see them, feel free to rewrite to a functional component\n2. Use hooks to reuse logic between the components\nReact Hooks provide nice way to share the code between different components\n3. Keep components small\nKeep components small, with one component corresponding to one function.\nGood rule of thumb: If your component file is >250 lines of code your component should probably be split into smaller component.\n4. Learn how useEffect works\nhttps://reactjs.org/docs/hooks-reference.html#useeffect\nhttps://overreacted.io/a-complete-guide-to-useeffect/\nhttps://beta.reactjs.org/learn/you-might-not-need-an-effect\n5. Don't do any side effects directly in component function\nAll the side effects should happen inside of useEffect or useLayoutEffect\nSide effects: calling some API, setTimetout, starting some animation etc, logging something, etc.\n6. When rendering list make sure each child has 'key' prop\nhttps://epicreact.dev/why-react-needs-a-key-prop/\n7. Keep styling in .styles file and strings in .strings file\nYou will notice that all components have .styles and .strings file next to it. For example: Header.web.tsx and Header.styles.web.tsx\n8. You usually want to wrap callback functions in useCallback\nhttps://reactjs.org/docs/hooks-reference.html#usecallback\nThis can improve re-rendering of component as you function is not created on every render\n9. To optimize re-rendering use useMemo and React.memo\nIf you have some expensive logic inside of your component you can use useMemo to calculate that logic only if needed: https://reactjs.org/docs/hooks-reference.html#usememo\nIf you want to manually control when to re-render whole component you can use React.memo: https://reactjs.org/docs/react-api.html#reactmemo\nhttps://blog.asayer.io/improving-react-application-performance-react-memo-vs-usememo\nWhen to use useMemo and useCallback\nhttps://kentcdodds.com/blog/usememo-and-usecallback\nhttps://www.developerway.com/posts/how-to-use-memo-use-callback\nhttps://canimerge.com/should-you-really-use-usememo-in-react-lets-find-out/\nThere are some subtle aspects regarding re-rendering which this article explains with great examples:\nhttps://www.developerway.com/posts/react-elements-children-parents\nOther resources\nPerformance guidelines from Teams - https://domoreexp.visualstudio.com/Teamspace/_git/teams-modular-packages?path=/docs/performance/performance-best-practices.md&_a=preview\n", 'title: NOTE:\n\n\nNOTE: When looking up learning material, make sure that it\'s upto date as RN has changed significantly in the last couple of years.\nPluralsight Courses on React Native Use http://aka.ms/Pluralsight to login.\nhttps://app.pluralsight.com/library/courses/building-mobile-apps-react-native\nhttps://app.pluralsight.com/library/courses/react-native-get-started\nNet Ninja Playlist - React Native Tutorial: https://www.youtube.com/playlist?list=PL4cUxeGkcC9ixPU-QkScoRBVxtPPzVjrQ\nInternal Talk on React Native Test App by @<7C553211-E970-60C8-9424-1BB5E7524389> Slides: react-native-testapp-1js.pptx (sharepoint.com) Recording: https://microsofteur-my.sharepoint.com/personal/davidnjugi_microsoft_com/_layouts/15/viewer.aspx?sourcedoc={5a66d53e-ea49-4f91-bd8a-0d4ea76baca9}\nReact Native Documentation Site jondot/awesome-react-native: Awesome React Native components, news, tools, and learning material! (github.com) An all-in-one repository of stuff about React Native. (Tip: For anything new you are learning there\'s an "awesome-\\<name>" repo and github similar to this one)\nNative Development\nIntroduction to Swift by Paul Hudson https://www.youtube.com/playlist?list=PLuoeXyslFTuas6GrfsUiFPShGXmaVDbgN\nKotlin Course - Tutorial for Beginners - YouTube\nNative iOS Module in React Native using Swift - YouTube\nReact Native Native Module Android | Kotlin - YouTube\n'], 19.49286460876465, 0.15211105346679688)
(["title: Guidelines on how to write React components\n\nGuidelines on how to write React components\nLots of useful tips can be found here: https://beta.reactjs.org/\n1. Always write functional components\nClass components are things of past and React community is moving away from them\nThere might be some old class components in our code (written before functional components were the thing). If you see them, feel free to rewrite to a functional component\n2. Use hooks to reuse logic between the components\nReact Hooks provide nice way to share the code between different components\n3. Keep components small\nKeep components small, with one component corresponding to one function.\nGood rule of thumb: If your component file is >250 lines of code your component should probably be split into smaller component.\n4. Learn how useEffect works\nhttps://reactjs.org/docs/hooks-reference.html#useeffect\nhttps://overreacted.io/a-complete-guide-to-useeffect/\nhttps://beta.reactjs.org/learn/you-might-not-need-an-effect\n5. Don't do any side effects directly in component function\nAll the side effects should happen inside of useEffect or useLayoutEffect\nSide effects: calling some API, setTimetout, starting some animation etc, logging something, etc.\n6. When rendering list make sure each child has 'key' prop\nhttps://epicreact.dev/why-react-needs-a-key-prop/\n7. Keep styling in .styles file and strings in .strings file\nYou will notice that all components have .styles and .strings file next to it. For example: Header.web.tsx and Header.styles.web.tsx\n8. You usually want to wrap callback functions in useCallback\nhttps://reactjs.org/docs/hooks-reference.html#usecallback\nThis can improve re-rendering of component as you function is not created on every render\n9. To optimize re-rendering use useMemo and React.memo\nIf you have some expensive logic inside of your component you can use useMemo to calculate that logic only if needed: https://reactjs.org/docs/hooks-reference.html#usememo\nIf you want to manually control when to re-render whole component you can use React.memo: https://reactjs.org/docs/react-api.html#reactmemo\nhttps://blog.asayer.io/improving-react-application-performance-react-memo-vs-usememo\nWhen to use useMemo and useCallback\nhttps://kentcdodds.com/blog/usememo-and-usecallback\nhttps://www.developerway.com/posts/how-to-use-memo-use-callback\nhttps://canimerge.com/should-you-really-use-usememo-in-react-lets-find-out/\nThere are some subtle aspects regarding re-rendering which this article explains with great examples:\nhttps://www.developerway.com/posts/react-elements-children-parents\nOther resources\nPerformance guidelines from Teams - https://domoreexp.visualstudio.com/Teamspace/_git/teams-modular-packages?path=/docs/performance/performance-best-practices.md&_a=preview\n", 'title: NOTE:\n\n\nNOTE: When looking up learning material, make sure that it\'s upto date as RN has changed significantly in the last couple of years.\nPluralsight Courses on React Native Use http://aka.ms/Pluralsight to login.\nhttps://app.pluralsight.com/library/courses/building-mobile-apps-react-native\nhttps://app.pluralsight.com/library/courses/react-native-get-started\nNet Ninja Playlist - React Native Tutorial: https://www.youtube.com/playlist?list=PL4cUxeGkcC9ixPU-QkScoRBVxtPPzVjrQ\nInternal Talk on React Native Test App by @<7C553211-E970-60C8-9424-1BB5E7524389> Slides: react-native-testapp-1js.pptx (sharepoint.com) Recording: https://microsofteur-my.sharepoint.com/personal/davidnjugi_microsoft_com/_layouts/15/viewer.aspx?sourcedoc={5a66d53e-ea49-4f91-bd8a-0d4ea76baca9}\nReact Native Documentation Site jondot/awesome-react-native: Awesome React Native components, news, tools, and learning material! (github.com) An all-in-one repository of stuff about React Native. (Tip: For anything new you are learning there\'s an "awesome-\\<name>" repo and github similar to this one)\nNative Development\nIntroduction to Swift by Paul Hudson https://www.youtube.com/playlist?list=PLuoeXyslFTuas6GrfsUiFPShGXmaVDbgN\nKotlin Course - Tutorial for Beginners - YouTube\nNative iOS Module in React Native using Swift - YouTube\nReact Native Native Module Android | Kotlin - YouTube\n'], 18.369674682617188, 0.15807151794433594)
======== Running on http://localhost:3978 ========
(Press CTRL+C to quit)
